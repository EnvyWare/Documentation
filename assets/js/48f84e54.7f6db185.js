"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1903],{512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"premium-mods/envygyms/requirements","title":"Requirements","description":"Requirements are conditions that must be met before the user can challenge this gym. They can be extended using sidemods, for those interested which is explained at the bottom of this page. Otherwise, the default accepted types are:","source":"@site/docs/premium-mods/envygyms/requirements.md","sourceDirName":"premium-mods/envygyms","slug":"/premium-mods/envygyms/requirements","permalink":"/docs/premium-mods/envygyms/requirements","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"premiumModsSidebar","previous":{"title":"Config","permalink":"/docs/premium-mods/envygyms/config"},"next":{"title":"EnvyScrolls","permalink":"/docs/premium-mods/envyscrolls/"}}');var i=t(4848),r=t(8453);const o={},a="Requirements",l={},m=[{value:"Developer API",id:"developer-api",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"requirements",children:"Requirements"})}),"\n",(0,i.jsx)(n.p,{children:"Requirements are conditions that must be met before the user can challenge this gym. They can be extended using sidemods, for those interested which is explained at the bottom of this page. Otherwise, the default accepted types are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BANNED_POKEMON"})," (where the data field is a spec)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"COOLDOWN"})," (where the data field is a cooldown in minutes)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PERMISSION"})," (where the data field is a permission the user must have)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GYM"})," (where the data field is the id of a gym the user needs to have beaten)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The mod will send the failed-message to the user if they do not meet the requirement"}),"\n",(0,i.jsx)(n.p,{children:"The config section looks like the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"type: permission\ndata: envy.gyms.gym.example\nfailed-message: '&cYou do not have permission to challenge this gym!'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"developer-api",children:"Developer API"}),"\n",(0,i.jsx)(n.p,{children:"See below for how to register a custom requirement type"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ExamplePermissionRequirement extends AbstractRequirement {\n\n    private static final String ID = "PERMISSION";\n\n    protected String permission;\n\n    public PermissionRequirement() {\n        super(ID);\n    }\n\n    @Override\n    public void load(ConfigGymRequirement requirement) {\n        super.load(requirement);\n\n        this.permission = requirement.getData();\n    }\n\n    @Override\n    public boolean meets(Gym gym, EnvyPlayer<?> player) {\n        return UtilPlayer.hasPermission((ServerPlayerEntity) player.getParent(), this.permission);\n    }\n}\n\npublic static class RandomMainClass {\n\n    public static void registerRequirement() {\n       RequirementRegistry.register(ExamplePermissionRequirement::new);\n   }\n}\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);